// LUCCA BORNANCIN PEDRONI SILVA
'''
Sua tarefa será construir um heap (binário, max-heap), e criar métodos para criar a árvore e a partir de um array, inserir, excluir, e buscar valores na árvore. Seu objetivo é explicar o funcionamento dos  métodos  que  você  irá  criar.  Para  isso,  deve  buscar  em  sites  acadêmicos,  exemplos  de implementação de árvores heap. Para  testar,  você deve usar  um  array  com,  no  mínimo, 500  itens,  gerados  randomicamente  e criar métodos para testar se a estrutura criada obedece a regra de criação que você determinou. 
'''
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
// DEFINE O TAMANHO MÁXIMO DO HEAP
#define MAX 500 

// NÓ RAIZ
int raiz(int i){
  return (i-1)/2;
}
//NÓ ESQUERDA
int esquerda(int i){
  return 2 * i + 1;
}
//NÓ DIREITA
int direita(int i){
  return 2 * i + 2;
}
// TROCA DE ELEMENTOS
void troca(int *a, int *b){
  int temp = *a;
  *a = *b;
  *b = temp;
}
// MÉTODO DE INSERÇÃO DE NÓS
void inserir(int a[], int valor, int *n){
  if(*n >= MAX){
    printf("\nO tamanho máximo do Heap foi atingido!");
    return;
  }
  a[*n] = valor;
  *n = *n + 1;

  int i = *n - 1;
  while(i != 0 && a[raiz(i)] < a[i]){
    troca(&a[raiz(i)], &a[i]);
    i = raiz(i);
  }
}
// CRIA UM HEAP NA ORDERM DECRESCENTE
void max_heapfy(int a[], int i, int n){
  int esq = esquerda(i);
  int dir = direita(i);

  int maior = i;
  if(esq <= n && a[esq] > a[maior]){
    maior = esq;
  }
  if(dir <= n && a[dir] > a[maior]){
    maior = dir;
  }
  if(maior != i){
    int temp = a[i];
    a[i] = maior;
    a[maior] = temp;
    max_heapfy(a, maior, n);
  }
}
// RETORNA O MAIOR VALOR PRESENTE NO HEAP
int get_max(int a[], int *n){
  printf("\nValor da raiz: %d", a[0]);
  return a[0];
}
// RETORNA O MENOR VALOR PRESENTE NO HEAP
int get_min(int a[], int *n){
  printf("Menor valor no heap: %d", a[*n-1]);
  return a[*n-1];
}
// TIRA O MAIOR VALOR DO HEAP E REFAZ A ÁRVORE
int extrair_max(int a[], int *n){
  int max_item = a[0];
  a[0] = a[*n-1];
  *n = *n -1;
  max_heapfy(a, 0, *n);
    return max_item;
}
// MOSTRA OS VALORES DO HEAP
void print_heap(int a[], int n){
  int i;
  printf("\n\n[ ");
  for (i=0; i<n; i++){
    printf("%d ",a[i]);
  }  
  printf("]\n");
}

int main(){
  //CRIA UM ARRAY DE 500 POSIÇÕES E O PREENCHE COM NÚMEROS ALEATÓRIOS E ADICIONA NA ÁRVORE HEAP
  srand(time(0));
  int arr[MAX];
  int n = 0;
  int val;
  int i;
  for(i=0; i!=MAX;i++){
    val = rand()%1000;
    inserir(arr, val, &n);
  }
  print_heap(arr, n);
  
  return 0;
}
