#LUCCA BORNANCIN PEDRONI SILVA
'''
Sua  tarefa  será  construir  um  código  capaz de  somar,  item  a  item,  todos os  inteiros  entre  1  e 
1.000.000. Existe, pelo menos uma fórmula matemática que pode ser usada para validar o resultado. 
Contudo, você deverá criar uma fila, armazenar este inteiros nesta fila, depois percorrer  fila somando 
estes valores. A tarefa é para exercitar o uso de algoritmos, não da matemática.  
Atenção: use a mesma plataforma que usou no Trabalho 1 – pilhas. 
Seu  objetivo  será  medir  o  tempo  para  inserção  de  1.000.000  milhão  de  inteiros  em  uma 
estrutura de dados, o tempo para percorrer e somar 1.000.000 de inteiros em uma estrutura de dados, 
e o  tempo para garantir que um determinado  inteiro  já está na  fila (busca). Finalmente você deverá 
medir estes tempos percorrendo a fila em dois sentidos. De cima para baixo e de baixo para cima. 
Seu resultado será a média dos tempos gastos para as operações citadas acima em, no mímino 
50 operações de cada tipo. As saídas apresentadas devem seguir o seguinte padrão: operação: tempo 
'''
from time import process_time
import random

def adicionar(fila, numero):
  fila.append(numero)

def retirar(fila):
  return fila.pop(0)

def buscar(fila):
  al= random.randint(1,1000000)
  if al in fila:
    return al
  
contador = 0

preenchimento = []
somas = []
somas2 = []
busca = []

while contador < 50:
  print("Contador: ",contador+1)
  fila = []
  n = 1
  #PREENCHIMENTO DA FILA:
  t1= process_time()
  while len(fila) != 1000000:
    adicionar(fila,n)
    n += 1
  t2= process_time()
  t11= t2-t1
  print("\n>> Preenchimento da fila: ",round(t11,4),"s")
  preenchimento.append(t11)
  fila2= fila.copy()
  fila3 = fila.copy()
  #SOMA DE TODOS OS ELEMENTOS DA FILA:
  t3= process_time()
  while len(fila) != 1:
    x= retirar(fila)
    y= retirar(fila)
    z= x+y
    adicionar(fila,z)
  t4=process_time()
  t22= t4-t3
  somas.append(t22)
  print("\n>> Resultado da Soma: ",z)
  print(">> Soma dos elementos: ",round(t22,4),"s")
  #SOMA NO SENTIDO CONTRARIO:
  t5= process_time()
  while len(fila2) != 1000000:
    x= fila2.pop()
    y= fila2.pop()
    z= x+y
    adicionar(fila2,z)
  t6= process_time()
  t33= t6-t5
  somas2.append(t33)
  print("\n>> Resultado da Soma (Sentido Contrário): ",z)
  print(">> Soma dos elementos (Sentido Contrário): ",round(t33,8),"s")
  #BUSCA DE ELEMENTOS NA FILA:
  t7= process_time()
  bus= buscar(fila3)
  t8= process_time()
  t44= t8-t7 
  busca.append(t44)
  print("\n>> Número "+str(bus)+" encontrado!")
  print(">> Busca: ",round(t44,4),"s")
  contador += 1
  print("=================================================")

m1= sum(preenchimento)/len(preenchimento)
print("\n==> Média do tempo de preenchimento das filas: ", round(m1,4),"s")
m2= sum(somas)/len(somas)
print("\n==> Média do tempo de soma dos elementos das filas: ", round(m2,4),"s")
m3= sum(somas2)/len(somas2)
print("\n==> Média do tempo de soma dos elementos das filas (Sentido Contrario): ", round(m3,4),"s")
m4= sum(busca)/len(busca)
print("\n==> Média do tempo de busca de um elemento nas filas: ", round(m4,4),"s")
